version: 2

jobs:
  build_backend:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo/backend

    steps:
      - checkout:
          path: ~/repo

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            pytest

      - store_artifacts:
          path: test-reports
          destination: test-reports
  
  build_frontend:
    working_directory: ~/repo/frontend
    docker:
      - image: circleci/node:10.16.3
    steps: # a collection of executable commands
      - checkout:
          path: ~/repo
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: install-npm-wee
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: test
          command: npm test
      - run:
          name: code-coverage
          command: 'npm test-coverage'
      #- store_artifacts:
      #    path: test-results.xml
      #    prefix: tests
      #- store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/ 
      #    path: coverage
      #    prefix: coverage
      #- store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
      #    path: test-results.xml


workflows:
  version: 2
  build_accept_deploy:
    jobs:
      - build_backend
      - build_frontend
