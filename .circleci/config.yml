version: 2

jobs:
  build_backend:
    docker:
      - image: circleci/python:3.6.1

    working_directory: ~/repo/backend

    steps:
      - checkout:
          path: ~/repo

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "../requirements.txt" }}
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r ../requirements.txt

      - run:
          name: backend code coverage
          command: |
            . venv/bin/activate
            py.test --cov --cov-report html
            codecov

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "../requirements.txt" }}

          name: run tests
          command: |
            . venv/bin/activate
            pytest
      
      - store_artifacts:
          path: test-reports
          destination: test-reports
  
  build_frontend:
    working_directory: ~/repo/frontend
    docker:
      - image: circleci/node:10.16.3
    steps:
      - checkout:
          path: ~/repo
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: install-npm-wee
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: test
          command: npm test
      - run:
          name: code-coverage
          command: | 
            npm run test-coverage
            ./node_modules/.bin/codecov --token=$CODECOV_TOKEN

  end_to_end_testing:
    working_directory: ~/repo/frontend
    machine:
      image: circleci/node:10.16.3
    steps:
      - checkout:
          path: ~/repo
      - run: 
          name: install all required software
          command: |
            apt update
            apt install python3
            apt install node

      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: install-npm-wee
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: build-npm
          command: |
            unset CI
            npm run build

      - run:
          name: move build to backend
          command: |
            set -o nounset
            set -o errexit
            set -o xtrace
            cp -r build/ ../backend/application/
            mv ../backend/application/build/ ../backend/application/built_frontend/
      
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "../requirements.txt" }}
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r ../requirements.txt

      - run:
          name: run flask application
          command: |
            python3 ../backend/run.py &
            npm cypress run    

  deploy_heroku:
    workers: process.env.CIRCLE_NODE_TOTAL
    working_directory: ~/repo/frontend
    docker:
      - image: circleci/node:10.16.3
    steps:
      - checkout:
          path: ~/repo
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: install-npm-wee
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules

      - run:
          name: build-npm
          command: |
            unset CI
            npm run build 
      
      - run:
          name: move build to backend
          command: |
            set -o nounset
            set -o errexit
            set -o xtrace
            cp -r build/ ../backend/application/
            mv ../backend/application/build/ ../backend/application/built_frontend/
             
      - run:
          name: push to Heroku
          command: |
            set -o nounset
            set -o errexit
            set -o xtrace
            git config --global user.email "circle@ci.com"
            git config --global user.name "CircleCi"
            git add ../backend/application/built_frontend/
            git commit -m "Automatic build step"
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master --force
          
workflows:
  version: 2
  build_accept_deploy:
    jobs:
      - end_to_end_testing
#      - build_backend
#      - build_frontend
#      - end_to_end_testing:
#          requires:
#            - build_backend
#            - build_frontend 
#      - deploy_heroku:
#          requires:
#            - end_to_end_testing
#          filters:
#            branches:
#              only: master
